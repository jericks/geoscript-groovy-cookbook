ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Filter Recipes

The Filter classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.19.0/geoscript/filter/package-summary.html[geoscript.filter]* package.

=== Creating Filters

[source,groovy]
.Create a Filter from a CQL string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFilterFromCql,indent=0]
----
....
include::output/filter_from_cql.txt[]
....

[source,groovy]
.Create a Filter from a CQL string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFilterFromXml,indent=0]
----
....
include::output/filter_from_xml.txt[]
....

[source,groovy]
.Create a pass Filter that return true for everything
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createPassFilter,indent=0]
----
....
include::output/filter_pass.txt[]
....

[source,groovy]
.Create a fail Filter that return false for everything
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFailFilter,indent=0]
----
....
include::output/filter_fail.txt[]
....

[source,groovy]
.Create a spatial bounding box Filter from a Bounds
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createBboxFilter,indent=0]
----
....
include::output/filter_bbox.txt[]
....

[source,groovy]
.Create a spatial contains Filter from a Geometry
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createContainsFilter,indent=0]
----
....
include::output/filter_contains.txt[]
....

[source,groovy]
.Create a spatial distance within Filter from a Geometry and a distance
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createDistanceWithinFilter,indent=0]
----
....
include::output/filter_dwithin.txt[]
....

[source,groovy]
.Create a spatial crosses Filter from a Geometry
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createCrossesFilter,indent=0]
----
....
include::output/filter_crosses.txt[]
....

[source,groovy]
.Create a spatial intersects Filter from a Geometry
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createIntersectsFilter,indent=0]
----
....
include::output/filter_intersects.txt[]
....

[source,groovy]
.Create a feature id Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createIdFilter,indent=0]
----
....
include::output/filter_id.txt[]
....

[source,groovy]
.Create a feature ids Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createIdsFilter,indent=0]
----
....
include::output/filter_ids.txt[]
....

[source,groovy]
.Create an equals Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createEqualsFilter,indent=0]
----
....
include::output/filter_equals.txt[]
....

=== Using Filters

[source,groovy]
.Get a CQL string from a Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getCqlAndXmlFromFilter_cql,indent=0]
----
....
include::output/filter_cql.txt[]
....

[source,groovy]
.Get an XML string from a Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getCqlAndXmlFromFilter_xml,indent=0]
----
....
include::output/filter_xml.txt[]
....

[source,groovy]
.Combine Filters with and
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=combineFiltersWithAnd,indent=0]
----
....
include::output/filter_and.txt[]
....

[source,groovy]
.Combine Filters with and using the plus operator
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=combineFiltersWithPlus,indent=0]
----
....
include::output/filter_plus.txt[]
....

[source,groovy]
.Combine Filters with or
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=combineFiltersWithOr,indent=0]
----
....
include::output/filter_or.txt[]
....

[source,groovy]
.Negate a Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=notFilter,indent=0]
----
....
include::output/filter_not.txt[]
....

[source,groovy]
.Negate a Filter using the minus operator
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=negativeFilter,indent=0]
----
....
include::output/filter_negative.txt[]
....

[source,groovy]
.Simplify a Filter
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=simplifyFilter,indent=0]
----
....
include::output/filter_simplify.txt[]
....

=== Evaluating Filters

[source,groovy]
.Test to see if a Filter matches a Feature by attribute
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isname,indent=0]
----
....
include::output/filter_evaluate_isname.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isnotname,indent=0]
----
....
include::output/filter_evaluate_isnotname.txt[]
....

[source,groovy]
.Test to see if a Filter matches a Feature by feature id
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isid,indent=0]
----
....
include::output/filter_evaluate_isid.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isnotid,indent=0]
----
....
include::output/filter_evaluate_isnotid.txt[]
....

[source,groovy]
.Test to see if a Filter matches a Feature by a spatial bounding box
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isbbox,indent=0]
----
....
include::output/filter_evaluate_isbbox.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateFilters_isnotbbox,indent=0]
----
....
include::output/filter_evaluate_isnotbbox.txt[]
....

=== Creating Literals

[source,groovy]
.Create a literal Expression from a number
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createLiteralFromNumber,indent=0]
----
....
include::output/filter_literal_create_number.txt[]
....

[source,groovy]
.Create a literal Expression from a string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createLiteralFromString,indent=0]
----
....
include::output/filter_literal_create_string.txt[]
....

[source,groovy]
.Evaluating a literal Expression just gives you the value
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateLiteral,indent=0]
----
....
include::output/filter_literal_evaluate.txt[]
....

=== Creating Properties

[source,groovy]
.Create a Property from a string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createPropertyFromString,indent=0]
----
....
include::output/filter_property_create_string.txt[]
....

[source,groovy]
.Create a Property from a Field
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createPropertyFromField,indent=0]
----
....
include::output/filter_property_create_field.txt[]
....

=== Evaluating Properties

[source,groovy]
.Evaluate a Property to get values from a Feature. Get the id
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateProperty_1,indent=0]
----
....
include::output/filter_property_evaluate_1.txt[]
....

[source,groovy]
.Get the name
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateProperty_2,indent=0]
----
....
include::output/filter_property_evaluate_2.txt[]
....

[source,groovy]
.Get the geometry
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaluateProperty_3,indent=0]
----
....
include::output/filter_property_evaluate_3.txt[]
....

=== Creating Functions

[source,groovy]
.Create a Function from a CQL string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFunctionFromCql,indent=0]
----
....
include::output/filter_function_create_cql.txt[]
....

[source,groovy]
.Create a Function from a name and Expressions
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFromNameAndExpressions,indent=0]
----
....
include::output/filter_function_create_name_expressions.txt[]
....

[source,groovy]
.Create a Function from a name, a Closure, and Expressions
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFromNameClosureAndExpressions,indent=0]
----
....
include::output/filter_function_create_name_closure_expressions.txt[]
....

[source,groovy]
.Create a Function from a CQL string and a Closure
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFromCqlAndClosure,indent=0]
----
....
include::output/filter_function_create_cql_closure.txt[]
....

[source,groovy]
.You can get a list of built in Functions
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getFunctionNames,indent=0]
----
....
include::output/filter_function_names.txt[]
....

=== Evaluating Functions

[source,groovy]
.Evaulate a geometry Function
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaulateFunctions_buffer,indent=0]
----
[.thumb]
image::filter_function_evaluate_buffer.png[]

[source,groovy]
.Evaulate a geometry Function
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=evaulateFunctions_lowercase,indent=0]
----
....
include::output/filter_function_evaluate_lowercase.txt[]
....

=== Process Functions

Process Functions are a combination of Functions and Processes that can be used to create rendering transformations.

[source,groovy]
.Create a Function from a Process that converts geometries in a Layer into a convexhull.
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createFunctionProcess,indent=0]
----
[.thumb]
image::createFunctionProcess.png[]

[source,groovy]
.Create a ProcessFunction from a Process that converts geometries in a Layer into a bounds.
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createProcessFunction,indent=0]
----
[.thumb]
image::createProcessFunction.png[]

=== Creating Colors

[source,groovy]
.Create a Color from a RGB color string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromRBGString,indent=0]
----
[.thumb]
image::filter_color_rbgstring.png[]

[source,groovy]
.Create a Color from a CSS color name
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromCSSColorName,indent=0]
----
[.thumb]
image::filter_color_csscolorname.png[]

[source,groovy]
.Create a Color from a hexadecimal string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromHexadecimal,indent=0]
----
[.thumb]
image::filter_color_hexadecimal.png[]

[source,groovy]
.Create a Color from a RGB List
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromRGBList,indent=0]
----
[.thumb]
image::filter_color_rgblist.png[]

[source,groovy]
.Create a Color from a RGB Map
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromRGBMap,indent=0]
----
[.thumb]
image::filter_color_rgbmap.png[]

[source,groovy]
.Create a Color from a RGB function string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromRGBFunctionString,indent=0]
----
[.thumb]
image::filter_color_rgbs_funcstring.png[]

[source,groovy]
.Create a Color from a HLS Map
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromHLSMap,indent=0]
----
[.thumb]
image::filter_color_hlsmap.png[]

[source,groovy]
.Create a Color from a HSL function string
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=createColorFromHSLFunctionString,indent=0]
----
[.thumb]
image::filter_color_hsl_functionstr.png[]


[source,groovy]
.Get a Random Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getRandomColor,indent=0]
----
[.thumb]
image::filter_color_random.png[]

[source,groovy]
.Get a Random Pastel Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getRandomPastelColor,indent=0]
----
[.thumb]
image::filter_color_random_pastel.png[]

[source,groovy]
.Get a darker Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getDarkerColor,indent=0]
----
[.thumb]
image::getDarkerColor.png[]

[source,groovy]
.Get a brighter Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getBrighterColor,indent=0]
----
[.thumb]
image::getBrighterColor.png[]

=== Getting Color Formats

[source,groovy]
.Create a Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorProperties_create,indent=0]
----
[.thumb]
image::getColorProperties.png[]

[source,groovy]
.Get Hex
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorProperties_hex,indent=0]
----
....
include::output/getColorProperties_hex.txt[]
....

[source,groovy]
.Get RGB
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorProperties_rgb,indent=0]
----
....
include::output/getColorProperties_rgb.txt[]
....

[source,groovy]
.Get HSL
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorProperties_hsl,indent=0]
----
....
include::output/getColorProperties_hsl.txt[]
....

[source,groovy]
.Get the java.awt.Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorProperties_awt,indent=0]
----
....
include::output/getColorProperties_awt.txt[]
....

=== Displaying Colors

[source,groovy]
.Draw a List of Colors to a BufferedImage
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=drawColorToImage,indent=0]
----
[.thumb]
image::filter_color_draw2img.png[]

[source,groovy]
.Draw a List of Colors to a simple GUI
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=drawColorToGui,indent=0]
----
[.thumb]
image::filter_color_drawgui.png[]

=== Using Color Palettes

[source,groovy]
.Get all color palettes
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorPalettes_all,indent=0]
----
....
include::output/getColorPalettes_all.txt[]
....

[source,groovy]
.Get diverging color palettes
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorPalettes_diverging,indent=0]
----
....
include::output/getColorPalettes_diverging.txt[]
....

[source,groovy]
.Get sequential color palettes
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorPalettes_sequential,indent=0]
----
....
include::output/getColorPalettes_sequential.txt[]
....

[source,groovy]
.Get qualitative color palettes
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getColorPalettes_qualitative,indent=0]
----
....
include::output/getColorPalettes_qualitative.txt[]
....

[source,groovy]
.Get a Blue Green Color Palette
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getPaletteColors_BuGn,indent=0]
----
[.thumb]
image::color_palette_bugn.png[]

[source,groovy]
.Get a Purple Color Palette with only four colors
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getPaletteColors_Purples,indent=0]
----
[.thumb]
image::color_palette_purples.png[]

[source,groovy]
.Get a Blue Green Color Palette
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getPaletteColors_MutedTerrain,indent=0]
----
[.thumb]
image::color_palette_mutedterrain.png[]

[source,groovy]
.Get a Blue Green Color Palette
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getPaletteColors_BlueToYellowToRedHeatMap,indent=0]
----
[.thumb]
image::color_palette_bluetoyellowtoredheatmap.png[]

[source,groovy]
.Create a Color palette by interpolating between two colors
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=interpolateColors,indent=0]
----
[.thumb]
image::filter_color_interpolate.png[]

[source,groovy]
.Create a Color palette by interpolating between two colors
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=interpolateColorsStatic,indent=0]
----
[.thumb]
image::filter_color_interpolate_static.png[]

=== Creating Expressions from CQL

[source,groovy]
.Create a literal number Expression from a CQL String
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getLiteralNumberFromCQL,indent=0]
----
....
include::output/filter_cql_literal_number.txt[]
....

[source,groovy]
.Create a literal string Expression from a CQL String
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getLiteralStringFromCQL,indent=0]
----
....
include::output/filter_cql_literal_string.txt[]
....

[source,groovy]
.Create a Property from a CQL String
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getPropertyFromCql,indent=0]
----
....
include::output/filter_cql_property.txt[]
....

[source,groovy]
.Create a Function from a CQL String
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=getFunctionFromCql,indent=0]
----
....
include::output/filter_cql_function.txt[]
....

=== Create Expression from static imports

[source,groovy]
.You can import short helper methods from the Expressions class.
----
import static geoscript.filter.Expressions.*
----

[source,groovy]
.Create a literal
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=staticImportsLiteral,indent=0]
----

[source,groovy]
.Create a Color
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=staticImportsColor,indent=0]
----

[source,groovy]
.Create a Property
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=staticImportsProperty,indent=0]
----

[source,groovy]
.Create a Function
----
include::{sourcedir}/geoscript/cookbook/FilterRecipes.groovy[tags=staticImportsFunction,indent=0]
----