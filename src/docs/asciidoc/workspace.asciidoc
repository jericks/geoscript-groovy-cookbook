ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Workspace Recipes

The Workspace classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.18.0/geoscript/workspace/package-summary.html[geoscript.workspace]* package.

A Workspace is a collection of Layers.  You can create, add, remove, and get Layers.  There are many
different kinds of Workspaces in GeoScript including Memory, PostGIS, Directory (for Shapefiles), GeoPackage,
and many more.

=== Using Workspaces

[source,groovy]
.Create a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createWorkspace,indent=0]
----

[source,groovy]
.Create a Layer
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createLayer,indent=0]
----
....
include::output/workspace_create_layer.txt[]
....

[source,groovy]
.Check whether a Workspace has a Layer by name
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=hasLayer,indent=0]
----
....
include::output/workspace_has_layer.txt[]
....

[source,groovy]
.Get a Layer from a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getLayer,indent=0]
----
....
include::output/workspace_get_layer.txt[]
....

[source,groovy]
.Add a Layer to a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=addLayer,indent=0]
----
....
include::output/workspace_add_layer.txt[]
....

[source,groovy]
.Get the names of all Layers in a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getNames,indent=0]
----
....
include::output/workspace_get_names.txt[]
....

[source,groovy]
.Remove a Layer from a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=removeLayer,indent=0]
----
....
include::output/workspace_remove_layer.txt[]
....

[source,groovy]
.Close the Workspace when you are done
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=closeWorkspace,indent=0]
----

=== Creating an in Memory Workspace

[source,groovy]
.The empty Workspace constructor creates an in Memory Workspace.  You can create a Layer by passing a name and a list of Fields. You can then remove the Layer by passing a reference to the Layer.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createMemoryWorkspace,indent=0]
----
....
include::output/workspace_create_memory.txt[]
....

=== Add Layer's Features in Chunks

[source,groovy]
.When adding a large Layer to a Workspace, you can add Features in chunks.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=workspaceAddLayerNameChunk,indent=0]
----
....
include::output/workspaceAddLayerNameChunk.txt[]
....

[.thumb]
image::workspaceAddLayerNameChunk.png[]

=== Using a Directory Workspace

A Directory Workspace is a directory of Shapefiles.

[source,groovy]
.Create a Directory Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_1,indent=0]
----
....
include::output/workspace_directory_1.txt[]
....

[source,groovy]
.View the Workspace's format
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_2,indent=0]
----
....
include::output/workspace_directory_2.txt[]
....

[source,groovy]
.View the Workspace's File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_3,indent=0]
----
....
include::output/workspace_directory_3.txt[]
....

[source,groovy]
.View the Workspace's list of Layer names
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_4,indent=0]
----
....
include::output/workspace_directory_4.txt[]
....

[source,groovy]
.Get a Layer by name
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_5,indent=0]
----
....
include::output/workspace_directory_5.txt[]
....

[source,groovy]
.Close the Directory when done.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspace_6,indent=0]
----

=== Investigating Workspaces

[source,groovy]
.Get available Workspace names
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceNames,indent=0]
----
....
include::output/workspace_get_names.txt[]
....

[source,groovy]
.Get parameters for a Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceParameters,indent=0]
----
....
include::output/workspace_get_parameters.txt[]
....

=== Creating Workspaces

==== Creating a Workspace from a connection string

You can create a Workspace from a connection string that contains paramters in key=value format with optional single quotes.

[source,groovy]
.Create a Shapefile Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromString_Shapefile,indent=0]
----

[source,groovy]
.Create a GeoPackage Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromString_GeoPackage,indent=0]
----

[source,groovy]
.Create a H2 Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromString_H2,indent=0]
----

[source,groovy]
.You can use the withWorkspace method to automatically handle closing the Workspace.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=withWorkspaceFromString,indent=0]
----
....
include::output/workspace_with_string.txt[]
....

==== Creating a Workspace from a connection map

You can create a Workspace from a connection map that contains paramters.

[source,groovy]
.Create a H2 Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromMap_H2,indent=0]
----

[source,groovy]
.Create a PostGIS Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromMap_PostGIS,indent=0]
----

[source,groovy]
.Create a GeoBuf Workspace
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=getWorkspaceFromMap_Geobuf,indent=0]
----

[source,groovy]
.You can use the withWorkspace method to automatically handle closing the Workspace.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=withWorkspaceFromMap,indent=0]
----
....
include::output/workspace_with_map.txt[]
....

==== Creating Directory Workspaces

[source,groovy]
.Create a Directory Workspace from a directory name
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspaceFromName,indent=0]
----

....
include::output/workspace_directory_name.txt[]
....

[source,groovy]
.Create a Directory Workspace from a File directory
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspaceFromFile,indent=0]
----

....
include::output/workspace_directory_file.txt[]
....

[source,groovy]
.Create a Directory Workspace from a URL
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createDirectoryWorkspaceFromUrl,indent=0]
----

....
include::output/workspace_directory_url.txt[]
....

==== Creating GeoPackage Workspaces

[source,groovy]
.Create a GeoPackage Workspace from a file name
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createGeoPackageWorkspaceFromName,indent=0]
----

....
include::output/workspace_geopackage_name.txt[]
....

[source,groovy]
.Create a GeoPackage Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createGeoPackageWorkspaceFromFile,indent=0]
----

....
include::output/workspace_geopackage_file.txt[]
....

==== Creating H2 Workspaces

[source,groovy]
.Create a H2 Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createH2WorkspaceFromFile,indent=0]
----

....
include::output/workspace_h2_file.txt[]
....

[source,groovy]
.Create a H2 Workspace with basic parameters
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createH2Workspace,indent=0]
----
<1> Database name
<2> Host name
<3> Port
<4> User name
<5> Password

[source,groovy]
.Create a H2 Workspace with named parameters.  Only the database name is required.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createH2WorkspaceWithNamedParameters,indent=0]
----


==== Creating Geobuf Workspaces

[source,groovy]
.Create a Geobuf Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createGeobufWorkspaceFromFile,indent=0]
----

....
include::output/workspace_geobuf_file.txt[]
....

==== Creating Flatgeobuf Workspaces

[source,groovy]
.Create a Flatgeobuf Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createFlatgeobufWorkspaceFromFile,indent=0]
----

....
include::output/workspace_flatgeobuf_file.txt[]
....

==== Creating Property Workspaces

[source,groovy]
.Create a Property Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createPropertyWorkspaceFromFile,indent=0]
----

....
include::output/workspace_property_file.txt[]
....

==== Creating SQLite Workspaces

[source,groovy]
.Create a SQLite Workspace from a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createSqliteWorkspaceFromFile,indent=0]
----

....
include::output/workspace_sqlite_file.txt[]
....


==== Creating PostGIS Workspaces

[source,groovy]
.Create a PostGIS Workspace with basic parameters
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createPostGISWorkspace,indent=0]
----
<1> Database name
<2> Host name
<3> Port
<4> Schema
<5> User name
<6> Password

[source,groovy]
.Create a PostGIS Workspace with advanced parameters
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createPostGISWorkspaceWithParameters,indent=0]
----
<1> Database name
<2> Host name
<3> Port
<4> Schema
<5> User name
<6> Password
<7> Estimated Extent
<8> Create Database
<9> Create Database Params

[source,groovy]
.Create a PostGIS Workspace with named parameters.  Only the database name is required.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createPostGISWorkspaceWithNamedParameters,indent=0]
----

[source,groovy]
.Delete a PostGIS database.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=postGisDeleteDatabase,indent=0]
----
<1> Database name
<2> Host name
<3> Port
<4> User name
<5> Password

[source,groovy]
.Delete a PostGIS database with named parameters.  Only the database name is required.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=postGisDeleteDatabaseWithNamedParameters,indent=0]
----

==== Creating MySQL Workspaces

[source,groovy]
.Create a MySQL Workspace with basic parameters
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createMySQLWorkspace,indent=0]
----
<1> Database name
<2> Host name
<3> Port
<4> User name
<5> Password

[source,groovy]
.Create a MySQL Workspace with named parameters.  Only the database name is required.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createMySQLWorkspaceWithNamedParameters,indent=0]
----

==== Creating SpatiaLite Workspaces

The SpatiaLite Workspace requires GDAL and OGR to be installed with Java support.

[source,groovy]
.Create a SpatiaLite Workspace with a File name
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createSpatiaLiteWorkspace,indent=0]
----

[source,groovy]
.Create a SpatiaLite Workspace with a File
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createSpatiaLiteWorkspaceFile,indent=0]
----

==== Creating WFS Workspaces

[source,groovy]
.Create a WFS Workspace with a URL
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createWFSWorkspace,indent=0]
----

==== Creating OGR Workspaces

The OGR Workspace requires GDAL and OGR to be installed with Java support.

On Ubuntu, you can install GDAL and OGR with the following commands:

[source,bash]
----
sudo apt-get install gdal-bin

sudo apt-get install libgdal-java
----

[source,groovy]
.Determine if OGR is available.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=ogrIsAvailable,indent=0]
----

[source,groovy]
.Get OGR Drivers.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=ogrDrivers,indent=0]
----

[source,groovy]
.Get a Shapefile Workspace from OGR.
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createOGRShapefileWorkspace,indent=0]
----

[source,groovy]
.Get a SQLite Workspace from OGR
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createOGRSqliteWorkspace,indent=0]
----

[source,groovy]
.Get a GeoJSON Workspace from OGR
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=createOGRGeoJsonWorkspace,indent=0]
----

=== Database Workspace

==== SQL

[source,groovy]
.Run SQL queries directly against Databse Workspace (PostGIS, MySQL, H2)
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseGetSql,indent=0]
----

[source,groovy]
.Count the number of results
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseGetSql_count,indent=0]
----
....
include::output/workspace_database_getsql_count.txt[]
....

[source,groovy]
.Calculate statistics
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseGetSql_stats,indent=0]
----
....
include::output/workspace_database_getsql_stats.txt[]
....

[source,groovy]
.Select rows
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseGetSql_select,indent=0]
----
....
include::output/workspace_database_getsql_select.txt[]
....

[source,groovy]
.Execute spatial sql
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseGetSql_spatial,indent=0]
----
[.thumb]
image::workspace_database_getsql.png[]

==== View

[source,groovy]
.Create a new Layer from a SQL View
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseView_create,indent=0]
----
<1> The layer name
<2> The SQL Statement
<3> The Geometry Field
<4> Query Parameters

....
include::output/workspace_database_view_create.txt[]
....
[.thumb]
image::workspace_database_view.png[]

[source,groovy]
.Remove the new Layer created from a SQL View
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseView_delete,indent=0]
----
....
include::output/workspace_database_view_delete.txt[]
....

==== Index

[source,groovy]
.Create an Index
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseIndex_create,indent=0]
----

[source,groovy]
.Get an Index
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseIndex_get,indent=0]
----
....
include::output/workspace_database_index.txt[]
....

[source,groovy]
.Remove an Index
----
include::{sourcedir}/geoscript/cookbook/WorkspaceRecipes.groovy[tags=databaseIndex_delete,indent=0]
----

