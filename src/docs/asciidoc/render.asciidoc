ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Render Recipes

The Render classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.13-SNAPSHOT/geoscript/render/package-summary.html[geoscript.render]* package.

=== Creating Maps

[source,groovy]
.Create a Map with Layers and render to a File.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=createMap,indent=0]
----
[.thumb]
image::map_create.png[]

[source,groovy]
.Create a Map with Layers and render to a file name.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=createMapWithFileName,indent=0]
----
[.thumb]
image::map_create_filename.png[]

[source,groovy]
.Create a Map with Layers and render to an OutputStream.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=createMapWithOutputStream,indent=0]
----
[.thumb]
image::map_create_outputstream.png[]

[source,groovy]
.Create a Map with Layers and render to an BufferedImage.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=createMapToImage,indent=0]
----
[.thumb]
image::map_create_image.png[]

[source,groovy]
.Create a Map with Layers and render to a Graphics2D object.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=createMapWithGraphics,indent=0]
----
[.thumb]
image::map_create_graphics.png[]

[source,groovy]
.Create a Map with Layers and display in a simple UI.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=displayMap,indent=0]
----
[.thumb]
image::render_display_map.png[]

=== Map Properties

[source,groovy]
.Get Map properties
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties,indent=0]
----
[.thumb]
image::map_properties.png[]

[source,groovy]
.Get width and height
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_widthheight,indent=0]
----
....
include::output/map_properties_widthheight.txt[]
....

[source,groovy]
.Get the Bounds
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_bounds,indent=0]
----
....
include::output/map_properties_bounds.txt[]
....

[source,groovy]
.Get the Projection
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_proj,indent=0]
----
....
include::output/map_properties_proj.txt[]
....

[source,groovy]
.Get the Layers
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_layers,indent=0]
----
....
include::output/map_properties_layers.txt[]
....

[source,groovy]
.Get the renderer type
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_type,indent=0]
----
....
include::output/map_properties_type.txt[]
....

[source,groovy]
.Get whether we are fixing the aspect ration or not.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_fixAspectRatio,indent=0]
----
....
include::output/map_properties_fixaspectratio.txt[]
....

[source,groovy]
.Get the background color
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_backgroundcolor,indent=0]
----
....
include::output/map_properties_backgroundcolor.txt[]
....

[source,groovy]
.Get the scale
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getMapProperties_scale,indent=0]
----
....
include::output/map_properties_scale.txt[]
....

=== Advanced Properties

[source,groovy]
.You can set the scale computation to be accurate (the default) or ogc compliant.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=setScaleComputation,indent=0]
----

Accurate
[.thumb]
image::map_accurate.png[]

OGC
[.thumb]
image::map_ogc.png[]

[source,groovy]
.You can set whether to use advanced projection handling or not.  By default this is set to true.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=setAdvancedProjectionHandling,indent=0]
----

Yes
[.thumb]
image::map_advancedproj_true.png[]

No
[.thumb]
image::map_advancedproj_false.png[]

[source,groovy]
.You can set whether to use continuous map wrapping. The default is true.
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=setContinuousMapWrapping,indent=0]
----

Yes
[.thumb]
image::map_continuouswrapping_true.png[]

No
[.thumb]
image::map_continuouswrapping_false.png[]

=== Rendering Maps

==== Finding Renderers

[source,groovy]
.Get all Renderers
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getRenderers,indent=0]
----
....
include::output/renderer_list.txt[]
....

[source,groovy]
.Get a Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getRenderer,indent=0]
----
....
include::output/renderer_get.txt[]
....

==== Image

[source,groovy]
.Render a Map to an image using an Image Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToImage,indent=0]
----
[.thumb]
image::map_image_image.png[]

[source,groovy]
.Render a Map to an OutputStream using the Image Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToFile,indent=0]
----
[.thumb]
image::map_image_file.jpeg[]

==== PNG

[source,groovy]
.Render a Map to an Image using the PNG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToPngImage,indent=0]
----
[.thumb]
image::map_png_image.png[]

[source,groovy]
.Render a Map to an OutputStream using the PNG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToPngFile,indent=0]
----
[.thumb]
image::map_png_file.png[]

==== JPEG

[source,groovy]
.Render a Map to an Image using the JPEG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToJpegImage,indent=0]
----
[.thumb]
image::map_jpeg_image.jpeg[]

[source,groovy]
.Render a Map to an OutputStream using the JPEG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToJpegFile,indent=0]
----
[.thumb]
image::map_jpeg_file.jpeg[]

==== GIF

[source,groovy]
.Render a Map to an Image using the GIF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToGifImage,indent=0]
----
[.thumb]
image::map_gif_image.png[]

[source,groovy]
.Render a Map to an OutputStream using the GIF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToGifFile,indent=0]
----
[.thumb]
image::map_gif_file.png[]

[source,groovy]
.Render a Map to an animated GIF using the GIF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderAnimatedGif,indent=0]
----

ifndef::backend-pdf[]
[.thumb]
image::render_animated_gif.gif[]
endif::[]

ifdef::backend-pdf[]
[.thumb]
image::render_animated_gif_0.png[]
[.thumb]
image::render_animated_gif_1.png[]
[.thumb]
image::render_animated_gif_2.png[]
endif::[]


==== GeoTIFF

[source,groovy]
.Render a Map to an Image using the GeoTIFF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToGeoTiffImage,indent=0]
----
[.thumb]
image::map_geotiff_image.png[]

[source,groovy]
.Render a Map to an OutputStream using the GeoTIFF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToGeoTiffFile,indent=0]
----
[.thumb]
image::map_geotiff_file.png[]

==== ASCII

[source,groovy]
.Render a Map to an string using the ASCII Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToAsciiString,indent=0]
----
....
include::output/render_ascii_string.txt[]
....

[source,groovy]
.Render a Map to an text file using the ASCII Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToAsciiFile,indent=0]
----
....
include::output/render_ascii_file.txt[]
....

==== Base64

[source,groovy]
.Render a Map to an string using the Base64 Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToBase64String,indent=0]
----
....
include::output/render_base64_string.txt[]
....

[source,groovy]
.Render a Map to an text file using the Base64 Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToBase64File,indent=0]
----
....
include::output/render_base64_file.txt[]
....

==== PDF

[source,groovy]
.Render a Map to a PDF Document using the PDF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToPdfDocument,indent=0]
----

[.thumb]
image::render_pdf.png[]

[source,groovy]
.Render a Map to a PDF file using the PDF Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToPdfFile,indent=0]
----

[.thumb]
image::render_pdf.png[]

==== SVG

[source,groovy]
.Render a Map to a SVG Document using the SVG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToSvgDocument,indent=0]
----

[.thumb]
image::render_svg.png[]

[source,groovy]
.Render a Map to a SVG file using the SVG Renderer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=renderToSvgFile,indent=0]
----

[.thumb]
image::render_svg.png[]

=== Displaying Maps

==== Finding Displayers

[source,groovy]
.Get all Displayers
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getDisplayers,indent=0]
----
....
include::output/displayer_list.txt[]
....

[source,groovy]
.Get a Displayer
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=getDisplayer,indent=0]
----
....
include::output/displayer_get.txt[]
....

==== Window

[source,groovy]
.Display a Map in a simple GUI
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=openDisplayerWindow,indent=0]
----
[.thumb]
image::displayer_window.png[]

==== MapWindow

[source,groovy]
.Display a Map in a interactive GUI
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=openDisplayerMapWindow,indent=0]
----
[.thumb]
image::displayer_mapwindow.png[]

=== Drawing

The Draw class is an easy way to quickly render a Geometry, a List of Geometries,
a Feature, or a Layer to an Image, a File, an OutputStream, or a GUI.


==== Drawing to a File or GUI

All of the draw methods take a single required parameter but can also take
the following optional parameters:

* style = A Style
* bounds = The Bounds
* size = The size of the canvas ([400,350])
* out = The OutputStream, File, or File name.  If null (which is the default) a GUI will be opened.
* format = The format ("jpeg", "png", "gif")
* proj = The Projection

[source,groovy]
.Draw a Geometry to a File
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawGeometryToFile,indent=0]
----
[.thumb]
image::render_draw_geometry.png[]

[source,groovy]
.Draw a List of Geometries to an OuputStream
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawGeometriesToOutputStream,indent=0]
----
[.thumb]
image::render_draw_geometries.png[]

[source,groovy]
.Draw a Feature to a file name
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawFeatureToFileName,indent=0]
----
[.thumb]
image::render_draw_feature_file.png[]

[source,groovy]
.Draw a Layer to a GUI
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawLayerToWindow,indent=0]
----
[.thumb]
image::render_draw_feature_window.png[]

[source,groovy]
.Draw a Raster to a File
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawRasterToFile,indent=0]
----
[.thumb]
image::render_draw_raster.png[]

==== Drawing to an Image

All of the drawToImage methods take a single required parameter but can also take
the following optional parameters:

* style = A Style
* bounds = The Bounds
* size = The size of the canvas ([400,350])
* imageType = The format ("jpeg", "png", "gif")
* proj = The Projection

[source,groovy]
.Draw a Geometry to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawGeometryToImage,indent=0]
----
[.thumb]
image::render_drawtoimage_geometry.png[]

[source,groovy]
.Draw a List of Geometries to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawGeometriesToImage,indent=0]
----
[.thumb]
image::render_drawtoimage_geometries.png[]

[source,groovy]
.Draw a Feature to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawFeatureToImage,indent=0]
----
[.thumb]
image::render_drawtoimage_feature.png[]

[source,groovy]
.Draw a Layer to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawLayerToImage,indent=0]
----
[.thumb]
image::render_drawtoimage_layer.png[]

[source,groovy]
.Draw a Raster to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=drawRasterToImage,indent=0]
----
[.thumb]
image::render_drawtoimage_raster.png[]

=== Plotting

==== Plotting to a File or GUI

The Plot module can plot a Geometry, a list of Geometries, a Feature, or a Layer to a File, a File name, an OutputStream, or
a simple GUI.

[source,groovy]
.Plot a Geometry to a File
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotGeometryToFile,indent=0]
----
[.thumb]
image::render_plot_geometry.png[]

[source,groovy]
.Plot a List of Geometries to an OutputStream
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotGeometriesToOutputStream,indent=0]
----
[.thumb]
image::render_plot_geometries.png[]

[source,groovy]
.Plot a Feature to a File name
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotFeatureToFileName,indent=0]
----
[.thumb]
image::render_plot_feature_file.png[]

[source,groovy]
.Plot a Layer to a GUI
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotLayerToWindow,indent=0]
----
[.thumb]
image::render_plot_layer.png[]

==== Plotting to an Image

The Plot module can plot a Geometry, a list of Geometries, a Feature, or a Layer to an image.

[source,groovy]
.Plot a Geometry to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotGeometryToImage,indent=0]
----
[.thumb]
image::render_plottoimage_geometry.png[]

[source,groovy]
.Plot a List of Geometries to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotGeometriesToImage,indent=0]
----
[.thumb]
image::render_plottoimage_geometries.png[]

[source,groovy]
.Plot a Feature to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotFeatureToImage,indent=0]
----
[.thumb]
image::render_plottoimage_feature.png[]

[source,groovy]
.Plot a Layer to an Image
----
include::{sourcedir}/geoscript/cookbook/RenderRecipes.groovy[tags=plotLayerToImage,indent=0]
----
[.thumb]
image::render_plottoimage_layer.png[]