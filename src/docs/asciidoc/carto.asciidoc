ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Carto Recipes

The Carto classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.20-SNAPSHOT/geoscript/carto/package-summary.html[geoscript.carto]* package.

The Carto package contains classes for creating cartographic documents.  All items are added to the document with x and y coordinates whose origin is the upper left
and width and a height.

=== Items

==== Adding a Map

[source,groovy]
.Add a map
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=map,indent=0]
----
[.thumb]
image::carto_map.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|map
|geoscript.render.Map
|The Map to display
|===

==== Adding an Overview Map

[source,groovy]
.Add an overview map
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=overViewMap,indent=0]
----
[.thumb]
image::carto_overviewmap.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|overviewMap
|geoscript.render.Map
|The overview Map

|linkedMap
|geoscript.render.Map
|The Map the overview Map is linked to

|areaStyle
|geoscript.style.Style
|The GeoScript style to display the rectangle

|zoomIntoBounds
|boolean
|Whether to zoom into the bounds of the linked Map or not

|scaleFactor
|double
|The scale factor for expanding the linked Map Bounds

|===

==== Adding a Text

[source,groovy]
.Add text
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=text,indent=0]
----
[.thumb]
image::carto_text.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|text
|String
|The text to display

|color
|java.awt.Color
|The text Color

|font
|java.awt.Font
| The text font

|horizontalAlign
|HorizontalAlign (LEFT, CENTER, RIGHT)
|The horizontal alignment

|verticalAlign
|VerticalAlign (TOP, MIDDLE, BOTTOM)
|The vertical alignment
|===

==== Adding a Rectangle

[source,groovy]
.Add a rectangle
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=rectangle,indent=0]
----
[.thumb]
image::carto_rect.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|strokeColor
|java.awt.Color
|The outline Color

|fillColor
|java.awt.Color
|The fill Color

|strokeWidth
|float
|The width of the stroke
|===

==== Adding a North Arrow

[source,groovy]
.Add a north arrow
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=northArrow,indent=0]
----
[.thumb]
image::carto_northarrow.png[]

==== Adding a NESW North Arrow

[source,groovy]
.Add a NESW north arrow
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=northArrow2,indent=0]
----
[.thumb]
image::carto_northarrow2.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|fillColor1
|java.awt.Color
|The first Fill Color

|strokeColor1
|java.awt.Color
|The first Stroke Color

|fillColor2
|java.awt.Color
|The second Fill Color

|strokeColor2
|java.awt.Color
|The second Stroke Color

|strokeWidth
|float
|The width of the stroke

|drawText
|boolean
|Whether to draw text (n,s,e,w) or not

|font
|java.awt.Font
|The Font for the text

|textColor
|java.awt.Color
|The text Color

|style
|NorthArrowStyle
|The North Arrow style (North or NorthEastSouthWest)
|===

==== Adding a Legend

[source,groovy]
.Add a legend for a Map
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=legendFromMap,indent=0]
----
[.thumb]
image::carto_legendFromMap.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|backgroudColor
|java.awt.Color
|The background Color

|title
|String
|The legend title

|titleFont
|java.awt.Font
|The title Font

|titleColor
|java.awt.Color
|The title Color

|textFont
|java.awt.Font
|The text Font

|textColor
|java.awt.Color
|The text Color

|entries
|List of LegendEntry instances
|Legend entries

|legendEntryWidth
|int
|The width of individual entries

|legendEntryHeight
|int
|The height of individual entries

|gapBetweenEntries
|int
|The gap between entries

|numberFormat
|String
|The number format (\#.##)
|===

==== Adding a Date

[source,groovy]
.Add a date
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=dateText,indent=0]
----
[.thumb]
image::carto_datetext.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|format
|String
|The date format (MM/dd/yyyy)

|date
|Date
|The Date to display

|color
|java.awt.Color
|The text Color

|font
|java.awt.Font
|The text Font

|horizontalAlign
|HorizontalAlign
|The horizontal alingment of the text

|verticalAlign
|VerticalAlign
|The vertical alingment of the text
|===

==== Adding Scale Text

[source,groovy]
.Add scale text
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=scaleText,indent=0]
----
[.thumb]
image::carto_scaletext.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|map
|geoscript.render.Map
|The Map to get the scale from

|color
|java.awt.Color
|The text Color

|font
|java.awt.Font
|The text Font

|horizontalAlign
|HorizontalAlign
|The horizontal alingment of the text

|verticalAlign
|VerticalAlign
|The vertical alingment of the text

|format
|String
|The number format for displaying the scale

|prefixText
|String
|The text to display before the scale (Scale: ...)
|===

==== Adding Scale Bar

[source,groovy]
.Add scale bar
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=scaleBar,indent=0]
----
[.thumb]
image::carto_scalebar.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|map
|geoscript.render.Map
|The Map to get the scale from

|strokeColor
|java.awt.Color
|The stroke Color

|fillColor
|java.awt.Color
|The fill Color

|strokeWidth
|float
|The stroke width

|barStrokeColor
|java.awt.Color
|The bar stroke Color

|barStrokeWidth
|float
|The bar stroke width

|font
|java.awt.Font
|The text Font

|textColor
|java.awt.Color
|The text Color

|border
|int
|The border padding

|units
|Units
|The units (metric or us)
|===

==== Adding a Line

[source,groovy]
.Add a line
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=line,indent=0]
----
[.thumb]
image::carto_line.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|map
|geoscript.render.Map
|The Map to get the scale from

|strokeColor
|java.awt.Color
|The stroke Color

|strokeWidth
|float
|The stroke width
|===

==== Adding a Grid

[source,groovy]
.Adding a grid is a nice way to placing items.
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=grid,indent=0]
----
[.thumb]
image::carto_grid.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|size
|int
|The cell size

|strokeColor
|java.awt.Color
|The stroke Color

|strokeWidth
|float
|The stroke width
|===

==== Adding a Paragraph

[source,groovy]
.Adding a paragraph of text
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=paragraph,indent=0]
----
[.thumb]
image::carto_paragraph.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|text
|String
|The paragraph text

|font
|java.awt.Font
|The text Font

|color
|java.awt.Color
|The text Color
|===

==== Adding an Image

[source,groovy]
.Adding an image
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=image,indent=0]
----
[.thumb]
image::carto_image.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|path
|File or URL
|The source path of the image
|===

==== Adding a Table

[source,groovy]
.Adding a Table
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=table,indent=0]
----
[.thumb]
image::carto_table.png[]

|===
|Property | Type | Description

|x
|int
|The number of pixels from left

|y
|int
|The number of pixels from top

|width
|int
|The width of the item in pixels

|height
|int
|The height of the item in pixels

|columns
|List of Strings
|The column names

|row
|A Maps of values
|One row of values where the keys are the column names.

|rows
|A List of Maps
|The data as a List of Maps where the keys are the column names.

|columnRowStyle
|TableItem.RowStyle
|backGroudColor, font, textColor, strokeColor for columns

|evenRowStyle
|TableItem.RowStyle
|backGroudColor, font, textColor, strokeColor for even rows

|oddRowStyle
|TableItem.RowStyle
|backGroudColor, font, textColor, strokeColor for odd rows

|===

=== Builders

CartoBuilders write cartographic documents to different formats.  Images, PDFs, and SVGs are currently supported.

==== ImageCartoBuilder

The ImageCartoBuilder can produce PNG or JPEG images.

[source,groovy]
.Use the ImageCartoBuilder to create a PNG image.
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=image_builder,indent=0]
----
[.thumb]
image::carto_image_builder.png[]

==== PdfCartoBuilder

[source,groovy]
.Use the PdfCartoBuilder to create a PDF.
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=pdf_builder,indent=0]
----
[.thumb]
image::carto_pdf_builder.png[]

==== SvgCartoBuilder

[source,groovy]
.Use the SvgCartoBuilder to create a SVG document.
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=svg_builder,indent=0]
----
[.thumb]
image::carto_svg_builder.png[]

=== Reading CartoBuilders

The IO module can read a CartoBuilder from JSON or XML documents.

==== Finding Carto Readers

[source,groovy]
.List all Carto Readers
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=listCartoReaders,indent=0]
----
....
include::output/carto_readers_list.txt[]
....

[source,groovy]
.Find a Carto Reader
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=findCartoReader,indent=0]
----
....
include::output/carto_readers_find.txt[]
....

==== JSON

[source,groovy]
.Read a CartoBuilder from a JSON String
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=readFromJson,indent=0]
----
[.thumb]
image::carto_io_json.png[]

==== XML

[source,groovy]
.Read a CartoBuilder from an XML String
----
include::{sourcedir}/geoscript/cookbook/CartoRecipes.groovy[tags=readFromXml,indent=0]
----
[.thumb]
image::carto_io_xml.png[]