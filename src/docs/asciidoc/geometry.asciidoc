ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Geometry Recipes

The Geometry classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.9.0/geoscript/geom/package-summary.html[geoscript.geom]* package.

=== Creating Geometries

[source,groovy]
.Create a Point with an XY
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createPoint,indent=0]
----
[.thumb]
image::geometry_create_point.png[]

[source,groovy]
.Create a LineString from Coordinates
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createLineStringFromCoordinates,indent=0]
----
[.thumb]
image::geometry_create_linestring_coordinates.png[]

[source,groovy]
.Create a Polygon from a List of Coordinates
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createPolygon,indent=0]
----
[.thumb]
image::geometry_create_polygon.png[]

[source,groovy]
.Create a MultiPoint with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiPoint,indent=0]
----
[.thumb]
image::geometry_create_multipoint.png[]

[source,groovy]
.Create a MultiLineString with a List of LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiLineString,indent=0]
----
[.thumb]
image::geometry_create_multilinestring.png[]

[source,groovy]
.Create a MultiPolygon with a List of Polygons
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiPolygon,indent=0]
----
[.thumb]
image::geometry_create_multipolygon.png[]

[source,groovy]
.Create a GeometryCollection with a List of Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createGeometryCollection,indent=0]
----
[.thumb]
image::geometry_create_geometrycollection.png[]

[source,groovy]
.Create a CircularString with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCircularString,indent=0]
----
[.thumb]
image::geometry_create_circularstring.png[]

[source,groovy]
.Create a CircularRing with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCircularRing,indent=0]
----
[.thumb]
image::geometry_create_circularring.png[]

[source,groovy]
.Create a CompoundCurve with a List of CircularStrings and LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCompoundCurve,indent=0]
----
[.thumb]
image::geometry_create_compoundcurve.png[]

[source,groovy]
.Create a CompoundRing with a connected List of CircularStrings and LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCompoundRing,indent=0]
----
[.thumb]
image::geometry_create_compoundring.png[]

=== Procesing Geometries

[source,groovy]
.Get the area of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getArea,indent=0]
----
....
include::output/geometry_getarea.txt[]
....

[source,groovy]
.Get the length of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getLength,indent=0]
----
....
include::output/geometry_getlength.txt[]
....

[source,groovy]
.Buffer a Point
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferPoint,indent=0]
----
[.thumb]
image::geometry_buffer_point.png[]

[source,groovy]
.Buffer a LineString with a butt cap
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferLineString1,indent=0]
----
[.thumb]
image::geometry_buffer_line1.png[]

[source,groovy]
.Buffer a LineString with a round cap
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferLineString2,indent=0]
----
[.thumb]
image::geometry_buffer_line2.png[]

[source,groovy]
.Buffer a LineString with a square cap
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferLineString3,indent=0]
----
[.thumb]
image::geometry_buffer_line3.png[]

[source,groovy]
.Buffer a LineString on the right side only
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferLineStringSingleSided1,indent=0]
----
[.thumb]
image::geometry_buffer_line_singlesided1.png[]

[source,groovy]
.Buffer a LineString on the left side only
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferLineStringSingleSided2,indent=0]
----
[.thumb]
image::geometry_buffer_line_singlesided2.png[]

[source,groovy]
.Check whether a Geometry contains another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=contains1,indent=0]
----
[.thumb]
image::geometry_contains_1.png[]
....
include::output/geometry_contains_1.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=contains2,indent=0]
----
[.thumb]
image::geometry_contains_2.png[]
....
include::output/geometry_contains_2.txt[]
....

[source,groovy]
.Create a convexhull Geometry around a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=convexHull,indent=0]
----
[.thumb]
image::geometry_convexhull.png[]

[source,groovy]
.Check whether a Geometry covers another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=covers1,indent=0]
----
[.thumb]
image::geometry_covers_1.png[]
....
include::output/geometry_covers_1.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=covers2,indent=0]
----
[.thumb]
image::geometry_covers_2.png[]
....
include::output/geometry_covers_2.txt[]
....

[source,groovy]
.Check whether a Geometry is covered by another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=coveredBy1,indent=0]
----
[.thumb]
image::geometry_coveredby_1.png[]
....
include::output/geometry_coveredby_1.txt[]
....

----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=coveredBy2,indent=0]
----
[.thumb]
image::geometry_coveredby_2.png[]
....
include::output/geometry_coveredby_2.txt[]
....

[source,groovy]
.Check whether one Geometry crosses another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=crosses,indent=0]
----
[.thumb]
image::geometry_crosses.png[]
....
include::output/geometry_crosses.txt[]
....

[source,groovy]
.Calculate the difference between two Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=difference,indent=0]
----
[.thumb]
image::geometry_difference.png[]

[source,groovy]
.Check whether one Geometry is disjoint from another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=disjoint,indent=0]
----
[.thumb]
image::geometry_distjoint.png[]
....
include::output/geometry_disjoint.txt[]
....

[source,groovy]
.Calculate the distance bewteen two Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=distance,indent=0]
----
[.thumb]
image::geometry_distance.png[]
....
include::output/geometry_distance.txt[]
....

[source,groovy]
.Get Bounds from a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bounds,indent=0]
----
[.thumb]
image::geometry_bounds.png[]

[source,groovy]
.Get the Boundary from a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundary,indent=0]
----
[.thumb]
image::geometry_boundary.png[]

[source,groovy]
.Get the Centroid from a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=centroid,indent=0]
----
[.thumb]
image::geometry_centroid.png[]

[source,groovy]
.Get the Interior Point from a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=interiorPoint,indent=0]
----
[.thumb]
image::geometry_interiorPoint.png[]

[source,groovy]
.Get the number of Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getNumGeometries,indent=0]
----
[.thumb]
image::geometry_getnumgeometries.png[]
....
include::output/geometry_getnumgeometries.txt[]
....

[source,groovy]
.Get a Geometry by index
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getGeometryN,indent=0]
----
[.thumb]
image::geometry_getgeometryn.png[]
....
include::output/geometry_getgeometryn.txt[]
....

[source,groovy]
.Get a List of Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getGeometries,indent=0]
----
[.thumb]
image::geometry_getgeometries.png[]
....
include::output/geometry_getgeometries.txt[]
....

[source,groovy]
.Get the number of Points in a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getNumPoints,indent=0]
----
[.thumb]
image::geometry_numpoints.png[]
....
include::output/geometry_numpoints.txt[]
....

[source,groovy]
.Create a Geometry of a String
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createFromText,indent=0]
----
[.thumb]
image::geometry_createfromtext.png[]

[source,groovy]
.Create a Sierpinski Carpet in a given Bounds and with a number of points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createSierpinskiCarpet,indent=0]
----
[.thumb]
image::geometry_sierpinskicarpet.png[]

[source,groovy]
.Create a Kock Snowflake in a given Bounds and with a number of points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createKochSnowflake,indent=0]
----
[.thumb]
image::geometry_kochsnowflake.png[]

[source,groovy]
.Create a number of random points within a given Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createRandomPoints,indent=0]
----
[.thumb]
image::geometry_create_random_points.png[]

[source,groovy]
.Create a number of random points within a given Geometry where the points are contrained to the cells of a grid
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createRandomPointsInGrid,indent=0]
----
[.thumb]
image::geometry_create_random_points_ingrid.png[]

[source,groovy]
.Calculate the intersection between two Geometries
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=intersection,indent=0]
----
[.thumb]
image::geometry_intersection.png[]

[source,groovy]
.Check whether one Geometry intersects from another Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=intersects,indent=0]
----
[.thumb]
image::geometry_intersects.png[]
....
include::output/geometry_intersects.txt[]
....


=== Reading and Writing Geometries

The *http://geoscript.github.io/geoscript-groovy/api/1.9.0/geoscript/geom/io/package-summary.html[geoscript.geom.io]* package
has several Readers and Writers for converting geoscript.geom.Geometry to and from strings.

==== Readers and Writers

[source,groovy]
.Find all Geometry Readers
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getGeometryReaders,indent=0]
----
....
include::output/geometry_list_readers.txt[]
....

[source,groovy]
.Find a Geometry Reader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=findGeometryReader,indent=0]
----
[.thumb]
image::geometry_find_reader.png[]

[source,groovy]
.Find all Geometry Writers
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getGeometryWriters,indent=0]
----
....
include::output/geometry_list_writers.txt[]
....

[source,groovy]
.Find a Geometry Writer
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=findGeometryWriter,indent=0]
----
....
include::output/geometry_find_writer.txt[]
....

==== WKB

[source,groovy]
.Read a Geometry from WKB using the WkbReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKBReader,indent=0]
----
[.thumb]
image::geometry_read_wkbreader.png[]

[source,groovy]
.Read a Geometry from WKB using the Geometry.fromWKB() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKB,indent=0]
----
[.thumb]
image::geometry_read_geometryfromwkb.png[]

[source,groovy]
.Get the WKB of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKB,indent=0]
----
....
include::output/geometry_to_wkb.txt[]
....

[source,groovy]
.Write a Geometry to  WKB using the WkbWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKBUsingWriter,indent=0]
----
....
include::output/geometry_to_wkb_using_writer.txt[]
....

==== WKT

[source,groovy]
.Read a Geometry from WKT using the WktReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKTReader,indent=0]
----
[.thumb]
image::geometry_read_wktreader.png[]

[source,groovy]
.Read a Geometry from WKT using the Geometry.fromWKT() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKT,indent=0]
----
[.thumb]
image::geometry_read_geometryfromwkt.png[]

[source,groovy]
.Get the WKT of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKT,indent=0]
----
....
include::output/geometry_to_wkt.txt[]
....

[source,groovy]
.Write a Geometry to  WKT using the WktWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKTUsingWriter,indent=0]
----
....
include::output/geometry_to_wkt_using_writer.txt[]
....

==== GeoJSON

[source,groovy]
.Read a Geometry from GeoJSON using the GeoJSONReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeoJSONReader,indent=0]
----
[.thumb]
image::geometry_read_geojsonreader.png[]

[source,groovy]
.Read a Geometry from GeoJSON using the Geometry.fromGeoJSON() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeoJSON,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgeojson.png[]

[source,groovy]
.Get the GeoJSON of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeoJSON,indent=0]
----
....
include::output/geometry_to_geojson.txt[]
....

[source,groovy]
.Write a Geometry to  GeoJSON using the GeoJSONWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeoJSONUsingWriter,indent=0]
----
....
include::output/geometry_to_geojson_using_writer.txt[]
....

==== KML

[source,groovy]
.Read a Geometry from KML using the KmlReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromKMLReader,indent=0]
----
[.thumb]
image::geometry_read_kmlreader.png[]

[source,groovy]
.Read a Geometry from KML using the Geometry.fromKml() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromKML,indent=0]
----
[.thumb]
image::geometry_read_geometryfromkml.png[]

[source,groovy]
.Get the KML of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToKML,indent=0]
----
....
include::output/geometry_to_kml.txt[]
....

[source,groovy]
.Write a Geometry to KML using the KmlWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToKMLUsingWriter,indent=0]
----
....
include::output/geometry_to_kml_using_writer.txt[]
....

==== Geobuf

[source,groovy]
.Read a Geometry from Geobuf using the GeobufReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeobufReader,indent=0]
----
[.thumb]
image::geometry_read_geobufreader.png[]

[source,groovy]
.Read a Geometry from Geobuf using the Geometry.fromGeobuf() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeobuf,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgeobuf.png[]

[source,groovy]
.Get the Geobuf of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeobuf,indent=0]
----
....
include::output/geometry_to_geobuf.txt[]
....

[source,groovy]
.Write a Geometry to Geobuf using the GeobufWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeobufUsingWriter,indent=0]
----
....
include::output/geometry_to_geobuf_using_writer.txt[]
....

==== GML 2

[source,groovy]
.Read a Geometry from GML2 using the Gml2Reader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGml2Reader,indent=0]
----
[.thumb]
image::geometry_read_gml2reader.png[]

[source,groovy]
.Read a Geometry from GML2 using the Geometry.fromGML2() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGml2,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgml2.png[]

[source,groovy]
.Get the GML2 of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGml2,indent=0]
----
....
include::output/geometry_to_gml2.txt[]
....

[source,groovy]
.Write a Geometry to GML2 using the Gml2Writer
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGml2UsingWriter,indent=0]
----
....
include::output/geometry_to_gml2_using_writer.txt[]
....

==== GML 3

[source,groovy]
.Read a Geometry from GML3 using the Gml3Reader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGml3Reader,indent=0]
----
[.thumb]
image::geometry_read_gml3reader.png[]

[source,groovy]
.Read a Geometry from GML3 using the Geometry.fromGML3() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGml3,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgml3.png[]

[source,groovy]
.Get the GML3 of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGml3,indent=0]
----
....
include::output/geometry_to_gml3.txt[]
....

[source,groovy]
.Write a Geometry to GML3 using the Gml3Writer
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGml3UsingWriter,indent=0]
----
....
include::output/geometry_to_gml3_using_writer.txt[]
....

==== GPX

[source,groovy]
.Read a Geometry from GPX using the GpxReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGpxReader,indent=0]
----
[.thumb]
image::geometry_read_gpxreader.png[]

[source,groovy]
.Read a Geometry from GPX using the Geometry.fromGPX() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGpx,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgpx.png[]

[source,groovy]
.Get the GPX of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGpx,indent=0]
----
....
include::output/geometry_to_gpx.txt[]
....

[source,groovy]
.Write a Geometry to GPX using the GpxWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGpxUsingWriter,indent=0]
----
....
include::output/geometry_to_gpx_using_writer.txt[]
....

==== GeoRSS

[source,groovy]
.Read a Geometry from GeoRSS using the GeoRSSReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeoRSSReader,indent=0]
----
[.thumb]
image::geometry_read_georssreader.png[]

[source,groovy]
.Write a Geometry to GeoRSS using the GeoRSSWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeoRSSUsingWriter,indent=0]
----
....
include::output/geometry_to_georss_using_writer.txt[]
....

==== Google Polyline

[source,groovy]
.Read a Geometry from a Google Polyline Encoded String using the GeoRSSReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGooglePolyline,indent=0]
----
[.thumb]
image::geometry_read_googlepolyline.png[]

[source,groovy]
.Write a Geometry to a Google Polyline Encoded String using the GeoRSSWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGooglePolyline,indent=0]
----
....
include::output/geometry_to_googlepolyline.txt[]
....