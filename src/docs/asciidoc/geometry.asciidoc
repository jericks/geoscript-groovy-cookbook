== Geometry Recipes

=== Creating Geometries

[source,groovy]
.Create a Point with an XY
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createPoint,indent=0]
----
[.thumb]
image::geometry_create_point.png[]

[source,groovy]
.Create a LineString from Coordinates
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createLineStringFromCoordinates,indent=0]
----
[.thumb]
image::geometry_create_linestring_coordinates.png[]

[source,groovy]
.Create a Polygon from a List of Coordinates
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createPolygon,indent=0]
----
[.thumb]
image::geometry_create_polygon.png[]

[source,groovy]
.Create a MultiPoint with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiPoint,indent=0]
----
[.thumb]
image::geometry_create_multipoint.png[]

[source,groovy]
.Create a MultiLineString with a List of LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiLineString,indent=0]
----
[.thumb]
image::geometry_create_multilinestring.png[]

[source,groovy]
.Create a MultiPolygon with a List of Polygons
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createMultiPolygon,indent=0]
----
[.thumb]
image::geometry_create_multipolygon.png[]

[source,groovy]
.Create a CircularString with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCircularString,indent=0]
----
[.thumb]
image::geometry_create_circularstring.png[]

[source,groovy]
.Create a CircularRing with a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCircularRing,indent=0]
----
[.thumb]
image::geometry_create_circularring.png[]

[source,groovy]
.Create a CompoundCurve with a List of CircularStrings and LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCompoundCurve,indent=0]
----
[.thumb]
image::geometry_create_compoundcurve.png[]

[source,groovy]
.Create a CompoundRing with a connected List of CircularStrings and LineStrings
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createCompoundRing,indent=0]
----
[.thumb]
image::geometry_create_compoundring.png[]


=== Procesing Geometries

[source,groovy]
.Get the area of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getArea,indent=0]
----
....
include::output/geometry_getarea.txt[]
....

[source,groovy]
.Get the length of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getLength,indent=0]
----
....
include::output/geometry_getlength.txt[]
....

[source,groovy]
.Buffer a Point
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bufferPoint,indent=0]
----
[.thumb]
image::geometry_buffer_point.png[]

[source,groovy]
.Get Bounds from a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=bounds,indent=0]
----
[.thumb]
image::geometry_bounds.png[]

=== Reading and Writing Geometries

The geoscript.geom.io package has several Readers and Writers for converting geoscript.geom.Geometry to and from strings.

==== WKT

[source,groovy]
.Read a Geometry from WKT using the WktReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKTReader,indent=0]
----
[.thumb]
image::geometry_read_wktreader.png[]

[source,groovy]
.Read a Geometry from WKT using the Geometry.fromWKT() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromWKT,indent=0]
----
[.thumb]
image::geometry_read_geometryfromwkt.png[]

[source,groovy]
.Get the WKT of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKT,indent=0]
----
....
include::output/geometry_to_wkt.txt[]
....

[source,groovy]
.Write a Geometry to  WKT using the WktWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToWKTUsingWriter,indent=0]
----
....
include::output/geometry_to_wkt_using_writer.txt[]
....

==== GeoJSON

[source,groovy]
.Read a Geometry from GeoJSON using the GeoJSONReader
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeoJSONReader,indent=0]
----
[.thumb]
image::geometry_read_geojsonreader.png[]

[source,groovy]
.Read a Geometry from GeoJSON using the Geometry.fromGeoJSON() static method
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=readGeometryFromGeoJSON,indent=0]
----
[.thumb]
image::geometry_read_geometryfromgeojson.png[]

[source,groovy]
.Get the GeoJSON of a Geometry
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeoJSON,indent=0]
----
....
include::output/geometry_to_geojson.txt[]
....

[source,groovy]
.Write a Geometry to  GeoJSON using the GeoJSONWriter
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=writeGeometryToGeoJSONUsingWriter,indent=0]
----
....
include::output/geometry_to_geojson_using_writer.txt[]
....

=== Creating Bounds

[source,groovy]
.Create a Bounds from four coordinates (minx, miny, maxx, maxy) and a projection.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createBounds,indent=0]
----
[.thumb]
image::geometry_create_bounds.png[]

[source,groovy]
.Create a Bounds from four coordinates (minx, miny, maxx, maxy) without a projection.  The projection can be set later.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createBoundsNoProjection,indent=0]
----
[.thumb]
image::geometry_create_bounds_no_proj.png[]

[source,groovy]
.Create a Bounds from a string with commas delimiting minx, miny, maxx, maxy and projection values.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createBoundsFromStringWithCommas,indent=0]
----
[.thumb]
image::geometry_create_bounds_fromstring_withcommas.png[]

[source,groovy]
.Create a Bounds from a string with spaces delimiting minx, miny, maxx, maxy and projection values.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=createBoundsFromStringWithSpaces,indent=0]
----
[.thumb]
image::geometry_create_bounds_fromstring_withspaces.png[]

=== Getting Bounds Properties

[source,groovy]
.Create a Bounds and view it's string representation
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties,indent=0]
----
....
include::output/geometry_bounds_properties.txt[]
....

[source,groovy]
.Get the minimum x coordinate
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_minX,indent=0]
----
....
include::output/geometry_bounds_properties_minx.txt[]
....

[source,groovy]
.Get the minimum y coordinate
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_minY,indent=0]
----
....
include::output/geometry_bounds_properties_miny.txt[]
....

[source,groovy]
.Get the maximum x coordinate
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_maxX,indent=0]
----
....
include::output/geometry_bounds_properties_maxx.txt[]
....

[source,groovy]
.Get the maximum y coordinate
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_maxY,indent=0]
----
....
include::output/geometry_bounds_properties_maxy.txt[]
....

[source,groovy]
.Get the Projection
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_proj,indent=0]
----
....
include::output/geometry_bounds_properties_proj.txt[]
....

[source,groovy]
.Get the area
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_area,indent=0]
----
....
include::output/geometry_bounds_properties_area.txt[]
....

[source,groovy]
.Get the width
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_width,indent=0]
----
....
include::output/geometry_bounds_properties_width.txt[]
....

[source,groovy]
.Get the height
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_height,indent=0]
----
....
include::output/geometry_bounds_properties_height.txt[]
....

[source,groovy]
.Get the aspect ratio
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=getBoundsProperties_aspect,indent=0]
----
....
include::output/geometry_bounds_properties_aspect.txt[]
....

[source,groovy]
.A Bounds is not a Geometry but you can get a Geometry from a Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsGetGeometry,indent=0]
----
[.thumb]
image::geometry_bounds_geometry.png[]

[source,groovy]
.You can also get a Polygon from a Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsGetPolygon,indent=0]
----
[.thumb]
image::geometry_bounds_polygon.png[]

[source,groovy]
.Get the four corners from a Bounds as a List of Points
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsGetCorners,indent=0]
----
[.thumb]
image::geometry_bounds_corners.png[]

=== Processing Bounds

[source,groovy]
.Reproject a Bounds from one Projection to another.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=reprojectBounds1,indent=0]
----
....
include::output/geometry_bounds_reproject1.txt[]
....

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=reprojectBounds2,indent=0]
----
....
include::output/geometry_bounds_reproject2.txt[]
....

[source,groovy]
.Expand a Bounds by a given distance
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=expandByBounds,indent=0]
----
[.thumb]
image::geometry_bounds_expandby.png[]

[source,groovy]
.Expand a Bounds to include another Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=expandBounds,indent=0]
----
[.thumb]
image::geometry_bounds_expand.png[]

[source,groovy]
.Scale an existing Bounds some distance to create a new Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=scaleBounds,indent=0]
----
[.thumb]
image::geometry_bounds_scale.png[]

[source,groovy]
.Divide a Bounds into smaller tiles or Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsTile,indent=0]
----
[.thumb]
image::geometry_bounds_tile.png[]

[source,groovy]
.Calculate a quad tree for this Bounds between the start and stop levels. A Closure is called for each new Bounds generated.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsQuadTree,indent=0]
----
....
include::output/geometry_bounds_quadtree.txt[]
....

[source,groovy]
.Determine whether a Bounds is empty or not. A Bounds is empty if it is null or it's area is 0.
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsIsEmpty_false,indent=0]
----
....
include::output/geometry_bounds_isempty_false.txt[]
....

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsIsEmpty_true,indent=0]
----
....
include::output/geometry_bounds_isempty_true.txt[]
....

[source,groovy]
.Determine if a Bounds contains another Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsContainsBounds1,indent=0]
----
[.thumb]
image::geometry_bounds_contains_bounds1.png[]
....
include::output/geometry_bounds_contains_bounds1.txt[]
....

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsContainsBounds2,indent=0]
----
[.thumb]
image::geometry_bounds_contains_bounds2.png[]
....
include::output/geometry_bounds_contains_bounds2.txt[]
....

[source,groovy]
.Determine if a Bounds contains a Point
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsContainsPoint1,indent=0]
----
[.thumb]
image::geometry_bounds_contains_point1.png[]
....
include::output/geometry_bounds_contains_point1.txt[]
....

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsContainsPoint2,indent=0]
----
[.thumb]
image::geometry_bounds_contains_point2.png[]
....
include::output/geometry_bounds_contains_point2.txt[]
....

[source,groovy]
.Determine if two Bounds intersect
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsIntersectsBounds1,indent=0]
----
[.thumb]
image::geometry_bounds_intersects1.png[]
....
include::output/geometry_bounds_intersects1.txt[]
....

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsIntersectsBounds2,indent=0]
----
[.thumb]
image::geometry_bounds_intersects2.png[]
....
include::output/geometry_bounds_intersects2.txt[]
....

[source,groovy]
.Calculate the intersection between two Bounds
----
include::{sourcedir}/geoscript/cookbook/GeometryRecipes.groovy[tags=boundsIntersection,indent=0]
----
[.thumb]
image::geometry_bounds_intersection.png[]