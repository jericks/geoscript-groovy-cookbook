ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Layer Recipes

The Layer classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.9.0/geoscript/layer/package-summary.html[geoscript.layer]* package.

A Layer is a collection of Features.

=== Getting a Layer's Properties

[source,groovy]
.Get a Layer from a Workspace and it's name
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerProperties_name,indent=0]
----
....
include::output/layer_properties_name.txt[]
....

[source,groovy]
.The Layer's Format
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerProperties_format,indent=0]
----
....
include::output/layer_properties_format.txt[]
....

[source,groovy]
.Count the number of Features
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerProperties_count,indent=0]
----
....
include::output/layer_properties_count.txt[]
....

[source,groovy]
.Get the Layer's Projection
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerProperties_proj,indent=0]
----
....
include::output/layer_properties_proj.txt[]
....

[source,groovy]
.Get the Bounds of the Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerProperties_bounds,indent=0]
----
....
include::output/layer_properties_bounds.txt[]
....

=== Getting a Layer's Features

[source,groovy]
.Iterate over a Layer's Features
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerFeatures,indent=0]
----
....
include::output/layer_features.txt[]
....

[source,groovy]
.Iterate over a subset of a Layer's Features
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerFeaturesFiltered,indent=0]
----
....
include::output/layer_features_filtered.txt[]
....

[source,groovy]
.Iterate over a Layer's Features with parameters.

----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerFeaturesWithParameters,indent=0]
----
....
include::output/layer_features_params.txt[]
....

Parameters

* filter: The Filter or Filter String to limit the Features. Defaults to null.
* sort:  A List of Lists that define the sort order [[Field or Field name, "ASC" or "DESC"],...]. Not all Layers support sorting!
* max:  The maximum number of Features to include
* start: The index of the record to start the cursor at.  Together with maxFeatures this simulates paging. Not all Layers support the start index and paging!
* fields: A List of Fields or Field names to include.  Used to select only a subset of Fields.

[source,groovy]
.Read all Feature into a List
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=getLayerFeaturesInAList,indent=0]
----
....
include::output/layer_list_features.txt[]
....

[source,groovy]
.Collect values from a Layer's Features
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=collectFromFeature,indent=0]
----
....
include::output/layer_collect_from_feature.txt[]
....

[source,groovy]
.Collect values from a Layer's Features with parameters.
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=collectFromFeatureWithOptions,indent=0]
----
....
include::output/layer_collect_from_feature_options.txt[]
....

[source,groovy]
.Get the first Feature that matches the Filter.
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=first,indent=0]
----
....
include::output/layer_first.txt[]
....

[.thumb]
image::layer_first.png[]

[source,groovy]
.Get the first Feature sorted by name ascending and descending.
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=firstSort,indent=0]
----
....
include::output/layer_first_sort.txt[]
....

[.thumb]
image::layer_first_sort.png[]

=== Adding, Updating, and Deleting

[source,groovy]
.Add Features to a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=addToLayer,indent=0]
----

include::output/layer_add.asciidoc[]

[.thumb]
image::layer_add.png[]

[source,groovy]
.Update Features in a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=updateLayer,indent=0]
----

include::output/layer_update_features.asciidoc[]

[.thumb]
image::layer_update_features.png[]

[source,groovy]
.Delete Features from a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=deleteFromLayer,indent=0]
----

include::output/layer_delete.asciidoc[]

[.thumb]
image::layer_delete.png[]


=== Geoprocessing

==== Reproject

[source,groovy]
.Reproject a Layer from it's source projection to a target projection
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=reproject,indent=0]
----

....
include::output/layer_reproject.txt[]
....

[.thumb]
image::layer_reproject.png[]

==== Buffer

[source,groovy]
.Buffer a Layer of populated places
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=buffer,indent=0]
----
[.thumb]
image::layer_buffer.png[]

==== Dissolve

[source,groovy]
.Dissolve a Layer by a Field
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=dissolve,indent=0]
----
[.thumb]
image::layer_dissolve.png[]

==== Merge

[source,groovy]
.Merge two Layer together
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=merge,indent=0]
----

....
include::output/layer_merge.txt[]
....

[.thumb]
image::layer_merge.png[]

==== Split

[source,groovy]
.Split a Layer into Layers based on the value from a Field
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=splitByField,indent=0]
----

....
include::output/layer_splitbyfield.txt[]
....

[.thumb]
image::layer_splitbyfield.png[]

[source,groovy]
.Split a Layer into Layers based on another Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=splitByLayer,indent=0]
----

....
include::output/layer_splitbylayer.txt[]
....

[.thumb]
image::layer_splitbylayer.png[]

==== Transform

[source,groovy]
.Transform one Layer into another Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=transform,indent=0]
----

....
include::output/layer_transform.txt[]
....

[.thumb]
image::layer_transform.png[]

=== Layer Algebra

GeoScript can do layer algebra.  All of the examples below use Layer A (red) and Layer B (green).

[.thumb]
image::layer_ab.png[]

==== Clip

[source,groovy]
.Clip Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=clip,indent=0]
----
[.thumb]
image::layer_clip.png[]

[source,groovy]
.Clip Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=clipToWorkspace,indent=0]
----
[.thumb]
image::layer_clip_to_workspace.png[]

==== Erase

[source,groovy]
.Erase Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=erase,indent=0]
----
[.thumb]
image::layer_erase.png[]

[source,groovy]
.Erase Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=eraseToWorkspace,indent=0]
----
[.thumb]
image::layer_erase_to_workspace.png[]

==== Identity

[source,groovy]
.Identity Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=identity,indent=0]
----
[.thumb]
image::layer_identity.png[]

[source,groovy]
.Identity Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=identityToWorkspace,indent=0]
----
[.thumb]
image::layer_identity_to_workspace.png[]

==== Intersection

[source,groovy]
.Intersection Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=intersection,indent=0]
----
[.thumb]
image::layer_intersection.png[]

[source,groovy]
.Intersection Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=intersectionToWorkspace,indent=0]
----
[.thumb]
image::layer_intersection_to_workspace.png[]

==== Symmetric Difference

[source,groovy]
.Symmetric Difference Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=symDifference,indent=0]
----
[.thumb]
image::layer_symDifference.png[]

[source,groovy]
.Symmetric Difference Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=symDifferenceToWorkspace,indent=0]
----
[.thumb]
image::layer_symDifference_to_workspace.png[]

==== Update

[source,groovy]
.Update Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=update,indent=0]
----
[.thumb]
image::layer_update.png[]

[source,groovy]
.Update Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=updateToWorkspace,indent=0]
----
[.thumb]
image::layer_update_to_workspace.png[]

==== Union

[source,groovy]
.Union Layer A with Layer B
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=union,indent=0]
----
[.thumb]
image::layer_union.png[]

[source,groovy]
.Union Layer B with Layer A
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=unionToWorkspace,indent=0]
----
[.thumb]
image::layer_union_to_workspace.png[]

=== Reading and Writing Features

The Layer IO classes are in the *http://geoscript.github.io/geoscript-groovy/api/1.9.0/geoscript/layer/io/package-summary.html[geoscript.layer.io]* package.

==== Finding Layer Writer and Readers

[source,groovy]
.List all Layer Writers
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=listLayerWriters,indent=0]
----
....
include::output/layer_list_writers.txt[]
....

[source,groovy]
.Find a Layer Writer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=findLayerWriter,indent=0]
----
....
include::output/layer_find_writer.txt[]
....

[source,groovy]
.List all Layer Readers
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=listLayerReaders,indent=0]
----
....
include::output/layer_list_readers.txt[]
....

[source,groovy]
.Find a Layer Reader
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=findLayerReader,indent=0]
----
....
include::output/layer_find_reader.txt[]
....

==== GeoJSON

[source,groovy]
.Get GeoJSON String from a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=layerToGeoJSONString,indent=0]
----
....
include::output/layer_to_geojson_string.txt[]
....

==== GeoBuf

[source,groovy]
.Get GeoBuf String from a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=layerToGeobufString,indent=0]
----
....
include::output/layer_to_geobuf_string.txt[]
....

==== GML

[source,groovy]
.Get GML String from a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=layerToGMLString,indent=0]
----
....
include::output/layer_to_gml_string.txt[]
....

==== KML

[source,groovy]
.Get KML String from a Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=layerToKMLString,indent=0]
----
....
include::output/layer_to_kml_string.txt[]
....


=== Graticules

==== Square

[source,groovy]
.Create a square graticules Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createSquareGraticule,indent=0]
----
[.thumb]
image::layer_graticule_square.png[]

[source,groovy]
.Create a square graticules Shapefile Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createSquareGraticuleToShapefile,indent=0]
----
[.thumb]
image::layer_graticule_square_shp.png[]

==== Hexagon

[source,groovy]
.Create a flat hexagon graticules Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createHexagonGraticule,indent=0]
----
[.thumb]
image::layer_graticule_hexagon.png[]

[source,groovy]
.Create a angled hexagon graticules Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createAngledHexagonGraticule,indent=0]
----
[.thumb]
image::layer_graticule_hexagon_angled.png[]

[source,groovy]
.Create a hexagon graticules Layer intersecting Washington States
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createIntersectingOnlyHexagonGraticule,indent=0]
----
[.thumb]
image::layer_graticule_hexagon_intersecting.png[]

[source,groovy]
.Create a hexagon graticules Layer with a custom schema
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createCustomSchemaHexagonGraticule,indent=0]
----
[.thumb]
image::layer_graticule_hexagon_customschema.png[]

==== Line

[source,groovy]
.Create a line graticules Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createLineGraticule,indent=0]
----
[.thumb]
image::layer_graticule_lines.png[]

==== Rectangle

[source,groovy]
.Create a rectangular graticules Layer
----
include::{sourcedir}/geoscript/cookbook/LayerRecipes.groovy[tags=createRectangularGraticule,indent=0]
----
[.thumb]
image::layer_graticule_rect.png[]
