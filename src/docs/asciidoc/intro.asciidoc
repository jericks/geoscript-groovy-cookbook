ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Introduction

The GeoScript Groovy Cookbook contains short recipes on how to use the GeoScript Groovy library.

GeoScript is a geospatial library written in Groovy. It provides modules
for working with geometries, projections, features, layers, rasters, styles, rendering, and tiles.
It is built on top of the Java Topology Suite (JTS) and GeoTools libraries. 
GeoScript Groovy is open source and licensed under the MIT license.

== Using GeoScript

To use GeoScript Groovy you need Java, Java Advanced Imaging (JAI), and Groovy installed and on your PATH. Next, download the latest stable release,
the latest in development build, or build the code yourself. Then put the GeoScript Groovy bin directory on your PATH.
You are now ready to use GeoScript Groovy!

GeoScript Groovy has three commands:

1. geoscript-groovy (which can run Groovy files)

[.thumb]
image::geoscript-groovy.png[]

2. geoscript-groovysh (which starts a REPL shell)

[.thumb]
image::geoscript-groovysh.png[]

3. geoscript-groovyConsole (which starts a graphical editor/mini IDE)

[.thumb]
image::geoscript-groovyConsole.png[]

=== geoscript-groovy

The geoscript-groovy command can run scripts file but it can also run inline scripts.

[source,bash]
.Convert a shapefile to geojson
----
geoscript-groovy -e "println new geoscript.layer.Shapefile('states.shp').toJSONString()"
----

[source,bash]
.Get the Bounds of a Shapefile as a Geometry
----
geoscript-groovy -e "println new geoscript.layer.Shapefile('states.shp').bounds.geometry"
----

[source,bash]
.Count the number of Features in a Shapefile
----
geoscript-groovy -e "println new geoscript.layer.Shapefile('states.shp').count"
----

[source,bash]
.Render a Shapefile to an image
----
geoscript-groovy -e "geoscript.render.Draw.draw(new geoscript.layer.Shapefile('states.shp'), out: 'image.png')"
----

[source,bash]
.Pipe a Shapefile's geometry to another command line application that buffers each feature
----
geoscript-groovy -e "new geoscript.layer.Shapefile('states.shp').eachFeature{ println it.geom.centroid}" | geom combine | geom buffer -d 1.5
----

[source,bash]
.Pipe the results of buffering a point to convert it to KML
----
echo "POINT (1 1)" | geom buffer -d 10 | geoscript-groovy -e "println geoscript.geom.Geometry.fromWKT(System.in.text).kml"
----

=== Library

==== Maven

[source,xml]
.You can also use GeoScript Groovy as a library. If you use Maven you will need to add the OSGeo Maven Repository:
----
<repository>
    <id>osgeo-releases</id>
    <name>OSGeo Nexus Release Repository</name>
    <url>https://repo.osgeo.org/repository/release/</url>
    <snapshots>
        <enabled>false</enabled>
    </snapshots>
    <releases>
        <enabled>true</enabled>
    </releases>
</repository>
----

[source,xml]
.and then include the GeoScript Groovy dependency:
----
<dependency>
    <groupId>org.geoscript</groupId>
    <artifactId>geoscript-groovy</artifactId>
    <version>1.16.0</version>
</dependency>
----

==== Gradle

[source,groovy]
.To use GeoScript Groovy in a Gradle project, add the following repositories:
----
repositories {
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
}
----

[source,groovy]
.and the include the GeoScript Groovy dependency:
----
dependencies {
    compile("org.geoscript:geoscript-groovy:1.16.0")
}
----