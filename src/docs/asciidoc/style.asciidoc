ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/groovy]

== Style Recipes

Styles are found in the *http://geoscript.github.io/geoscript-groovy/api/1.19-SNAPSHOT/geoscript/style/package-summary.html[geoscript.style]* package.

Styles are made up Symbolizers and Composites.  A Symbolizer is a particular style like Stroke or Fill.  Symbolizers also have methods for controlling the drawing order (zindex), the min and max scale (range), and filtering (where).

=== Creating Basic Styles

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createBasicSymbolizer,indent=0]
----
[.thumb]
image::style_basic_symbolizer.png[]

A Composite is simply two or more Symbolizers.  So, a Composite would be a combination of a Stroke symbolizer (to style the boundary) and a Fill Symbolizer (to style the interior).

[source,groovy]
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createBasicComposite,indent=0]
----
[.thumb]
image::style_basic_composite.png[]

[source,groovy]
.A Symbolizer can use the where method to restrict which features are styled.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createBasicSymbolizerWithWhere,indent=0]
----
[.thumb]
image::style_basic_symbolizer_where.png[]

[source,groovy]
.The zindex method is used to order Symbolizers on top of each other. In this recipe we use it to create line casings.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createBasicSymbolizerWithZindex,indent=0]
----
[.thumb]
image::style_basic_symbolizer_zindex.png[]

[source,groovy]
.The scale method is used to create Symbolizers that are dependent on map scale.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createBasicSymbolizerWithScale,indent=0]
----
[.thumb]
image::style_basic_symbolizer_scale1.png[]

[.thumb]
image::style_basic_symbolizer_scale2.png[]

=== Creating Strokes

[source,groovy]
.Create a Stroke Symbolizer with a Color
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithColor,indent=0]
----
[.thumb]
image::style_stroke_color.png[]

[source,groovy]
.Create a Stroke Symbolizer with a Color and Width
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithColorAndWidth,indent=0]
----
[.thumb]
image::style_stroke_color_width.png[]

[source,groovy]
.Create a Stroke Symbolizer with casing
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithCasing,indent=0]
----
[.thumb]
image::style_stroke_casing.png[]

[source,groovy]
.Create a Stroke Symbolizer with Dashes
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithDashes,indent=0]
----
[.thumb]
image::style_stroke_dashes.png[]

[source,groovy]
.Create a Stroke Symbolizer with railroad Hatching
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithHatch,indent=0]
----
[.thumb]
image::style_stroke_hatch.png[]

[source,groovy]
.Create a Stroke Symbolizer with spaced Shape symbols
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithSpacedSymbols,indent=0]
----
[.thumb]
image::style_stroke_space_symbols.png[]

[source,groovy]
.Create a Stroke Symbolizer with alternating spaced Shape symbols
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createStrokeWithAlternatingSymbols,indent=0]
----
[.thumb]
image::style_stroke_alternating_symbols.png[]

=== Creating Fills

[source,groovy]
.Create a Fill Symbolizer with a Color
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithColor,indent=0]
----
[.thumb]
image::style_fill_color.png[]

[source,groovy]
.Create a Fill Symbolizer with a Color and a Stroke
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithStroke,indent=0]
----
[.thumb]
image::style_fill_stroke.png[]

[source,groovy]
.Create a Fill Symbolizer with a Color and Opacity
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithColorAndOpacity,indent=0]
----
[.thumb]
image::style_fill_color_opacity.png[]

[source,groovy]
.Create a Fill Symbolizer from named parameters
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithMap,indent=0]
----
[.thumb]
image::style_fill_map.png[]


[source,groovy]
.Create a Fill Symbolizer with an Icon
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithIcon,indent=0]
----
[.thumb]
image::style_fill_icon.png[]

[source,groovy]
.Create a Fill Symbolizer with a Hatch
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithHatch,indent=0]
----
[.thumb]
image::style_fill_hatch.png[]

[source,groovy]
.Create a Fill Symbolizer with a random fill
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithRandom,indent=0]
----
[.thumb]
image::style_fill_random.png[]

[source,groovy]
.Create a Fill Symbolizer with a Recode Function
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createFillWithRecodeFunction,indent=0]
----
[.thumb]
image::style_fill_recode_function.png[]
=== Creating Shapes

[source,groovy]
.Create a Shape Symbolizer with a Color
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createShapeWithColor,indent=0]
----
[.thumb]
image::style_shape_color.png[]

[source,groovy]
.Create a Shape Symbolizer with a color, size, type, opacity and angle
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createShape,indent=0]
----
[.thumb]
image::style_shape.png[]

[source,groovy]
.Create a Shape Symbolizer with named parameters
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createShapeWithNamedParams,indent=0]
----
[.thumb]
image::style_shape_params.png[]

[source,groovy]
.Create a Shape Symbolizer with Stroke outline
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createShapeWithStroke,indent=0]
----
[.thumb]
image::style_shape_stroke.png[]

=== Creating Icons

[source,groovy]
.Create an Icon Symbolizer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createIcon,indent=0]
----
[.thumb]
image::style_icon.png[]

[source,groovy]
.Create an Icon Symbolizer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createIconWithParams,indent=0]
----
[.thumb]
image::style_icon_params.png[]

=== Creating Labels

[source,groovy]
.Create a Label for a Point Layer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPoints,indent=0]
----
<1> anchor
<2> displacement
<3> rotation

[.thumb]
image::style_label_points.png[]

[source,groovy]
.Create a Label for a Point Layer with a Font
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPointsWithFont,indent=0]
----
<1> style (normal, italic, oblique)
<2> weight (normal, bold)
<3> size (8,12,16,ect..)
<4> family (serif, arial, verdana)

[.thumb]
image::style_label_points_font.png[]

[source,groovy]
.Create a Label for a Point Layer with Halo
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPointsWithHalo,indent=0]
----

[.thumb]
image::style_label_points_halo.png[]

[source,groovy]
.Create a Label for a Polygon Layer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPolygons,indent=0]
----

[.thumb]
image::style_label_polygons.png[]

[source,groovy]
.Create a Label for a Polygon Layer using an Expression
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPolygonsWithExpression,indent=0]
----

[.thumb]
image::style_label_polygons_expression.png[]

[source,groovy]
.Create a Label for a Polygon Layer using an Expression that concatenates properties and strings.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelWithExpression,indent=0]
----

[.thumb]
image::createLabelWithExpression.png[]

[source,groovy]
.Create a Label for a Polygon Layer with strike through style.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPolygonsWithStrikeThrough,indent=0]
----
[.thumb]
image::style_label_polygons_strikethrough.png[]

[source,groovy]
.Create a Label for a Polygon Layer with word and character spacing.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPolygonsWithSpacing,indent=0]
----
[.thumb]
image::style_label_polygons_spacing.png[]

[source,groovy]
.Create a Label for a Polygon Layer with underlining.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForPolygonsWithUnderline,indent=0]
----
[.thumb]
image::style_label_polygons_underline.png[]

[source,groovy]
.Create a Label for a Line Layer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createLabelForLines,indent=0]
----

[.thumb]
image::style_label_lines.png[]

=== Creating Transforms

[source,groovy]
.Create a normal Transform symbolizer that styles a polygon as a point by calculating it's centroid
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createNormalTransform,indent=0]
----
[.thumb]
image::style_transform_normal.png[]

[source,groovy]
.Create a rendering Transform symbolizer that styles a point layer by calculating the convex hull
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRenderingTransform,indent=0]
----
[.thumb]
image::style_transform_rendering.png[]

=== Creating Gradients

[source,groovy]
.Create a Gradient Symbolizer from a Layer's Field using quantile method
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createGradientOnFieldWithQuantile,indent=0]
----
[.thumb]
image::style_gradient_field_quantile.png[]

[source,groovy]
.Create a Gradient Symbolizer from a Layer's Field using equal interval method
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createGradientOnFieldWithEqualInterval,indent=0]
----
[.thumb]
image::style_gradient_field_equalinterval.png[]

[source,groovy]
.Create a custom Gradient Symbolizer between Symbolizers and values
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createGradientCustom,indent=0]
----
[.thumb]
image::style_gradient_custom.png[]

=== Creating Unique Values

[source,groovy]
.Create a Unique Values Symbolizer from a Layer's Field
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createUniqueValues,indent=0]
----
[.thumb]
image::style_uniquevalues.png[]

[source,groovy]
.Create a Unique Values Symbolizer from a Layer's Field and a Closure
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createUniqueValuesWithClosure,indent=0]
----
[.thumb]
image::style_uniquevalues_closure.png[]

[source,groovy]
.Create a Unique Values Symbolizer from a Layer's Field and a color palette
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createUniqueValuesWithPalette,indent=0]
----
[.thumb]
image::style_uniquevalues_palette.png[]

[source,groovy]
.Create a Unique Values Symbolizer from a File with a color per value
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createUniqueValuesReader,indent=0]
----
....
include::output/style_mars_geology.txt[]
....
[.thumb]
image::style_mars_geology.png[]

=== Creating Color Maps

[source,groovy]
.Create a ColorMap Symbolizer for a Raster using a list of Colors
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterColorMap,indent=0]
----
[.thumb]
image::style_raster_colormap_colors.png[]

[source,groovy]
.Create a ColorMap Symbolizer for a Raster using a list of Colors with opacity
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterColorMapWithOpacity,indent=0]
----
[.thumb]
image::style_raster_colormap_colors_opacity.png[]


[source,groovy]
.Create a ColorMap Symbolizer for a Raster using a color palette
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterColorMapWithPalette,indent=0]
----
<1> min value
<2> max value
<3> color palette name
<4> number of categories

[.thumb]
image::style_raster_colormap_palette.png[]

[source,groovy]
.Create a ColorMap Symbolizer with intervals for a Raster using a list of Colors
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterColorMapWithIntervals,indent=0]
----
[.thumb]
image::style_raster_colormap_intervals.png[]

=== Creating Channel Selection and Contrast Enhancement

[source,groovy]
.Create a Raster Symbolizer using ChannelSelection and ContrastEnhancement using the normalize method
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterChannelContrastEnhancementNormalize,indent=0]
----
[.thumb]
image::style_raster_channel_constrast_normalize.png[]


[source,groovy]
.Create a Raster Symbolizer using ChannelSelection and ContrastEnhancement using the histogram method
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=createRasterChannelContrastEnhancementHistogram,indent=0]
----
[.thumb]
image::style_raster_channel_constrast_histogram.png[]

=== Reading and Writing Styles

Style Readers and Writers are found in the *http://geoscript.github.io/geoscript-groovy/api/1.19-SNAPSHOT/geoscript/style/io/package-summary.html[geoscript.style.io]* package.

==== Finding Style Readers and Writers

[source,groovy]
.List all Style Writers
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=listStyleWriters,indent=0]
----
....
include::output/style_writers_list.txt[]
....

[source,groovy]
.Find a Style Writer
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=findStyleWriter,indent=0]
----
....
include::output/style_writers_find.txt[]
....

[source,groovy]
.List all Style Readers
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=listStyleReaders,indent=0]
----
....
include::output/style_readers_list.txt[]
....

[source,groovy]
.Find a Style Reader
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=findStyleReader,indent=0]
----
....
include::output/style_readers_find.txt[]
....

==== SLD

GeoScript Groovy can read and write Style Layer Descriptor (SLD) documents.

[source,groovy]
.Write a Symbolizer to SLD
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=writeSld,indent=0]
----
....
include::output/style_write_sld.txt[]
....

.Write a Symbolizer to SLD with NamedLayer element.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=writeSldWithNamedLayer,indent=0]
----
<1> type can be UserLayer (default) or NamedLayer
....
include::output/style_write_namedlayer_sld.txt[]
....

[source,groovy]
.Read a Style from an SLD String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readSld,indent=0]
----
[.thumb]
image::style_read_sld.png[]

==== CSS

GeoScript Groovy can only read CSS documents.

[source,groovy]
.Read a Style from an CSS String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readCss,indent=0]
----
[.thumb]
image::style_read_css.png[]

==== YSLD

GeoScript Groovy can read and write YAML Style Layer Descriptors (YSLD) documents.

[source,groovy]
.Write a Symbolizer to YSLD
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=writeYSLD,indent=0]
----
....
include::output/style_write_ysld.txt[]
....

[source,groovy]
.Read a Style from an YAML Style Layer Descriptors (YSLD) String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readYSLD,indent=0]
----
[.thumb]
image::style_read_ysld.png[]

==== Simple Style Reader

A SimpleStyleReader that can easily create simple Styles using Maps or Strings.

* Fill properties: fill and fill-opacity
* Stroke properties: stroke, stroke-width, stroke-opacity
* Shape properties: shape, shape-size, shape-type
* Label properties: label-size, label-style, label-weight, label-family

[source,groovy]
.Read a Style with fill and stroke properties from a Simple Style String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readSimpleStyleFillStrokeString,indent=0]
----
[.thumb]
image::style_read_fill_stroke_str.png[]

[source,groovy]
.Read a Style with fill, stroke, and label properties from a Simple Style String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readSimpleStyleFillStrokeAndLabelString,indent=0]
----
[.thumb]
image::style_read_fill_stroke_label_str.png[]

[source,groovy]
.Read a Style with shape properties from a Simple Style String
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readSimpleStyleShapeString,indent=0]
----
[.thumb]
image::style_read_shape_str.png[]

[source,groovy]
.Read a Style with fill and stroke properties from a Simple Style Map
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readSimpleStyleFillStrokeMap,indent=0]
----
[.thumb]
image::style_read_fill_stroke_map.png[]

==== Color Table

GeoScript Groovy can read and write color table strings and files. This format can be used with ColorMaps to style
Rasters.

[source,groovy]
.Write a ColorMap to a color table string
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=writeColorTable,indent=0]
----
....
include::output/style_colortable_writer_str.txt[]
....

[source,groovy]
.Read a ColorMap from a color table string
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=readColorTable,indent=0]
----
[.thumb]
image::style_colortable_read_str.png[]

=== Style Repositories

Style Repositories can be found in the *http://geoscript.github.io/geoscript-groovy/api/1.19-SNAPSHOT/geoscript/style/package-summary.html[geoscript.style]* package.

Style Repositories are useful for storing styles for layers in a directories or databases.

==== Flat Directory

All files are stored in a single directory.

[source,groovy]
.Store styles in a flat directory.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=useDirectoryStyleRepository,indent=0]
----

==== Nested Directory

Files are stories in nested directories based on the layer name.

[source,groovy]
.Store styles in nested directories.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=useNestedDirectoryStyleRepository,indent=0]
----

==== PostGIS Database

[source,groovy]
.Store styles in a PostGIS database.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=usePostGISDatabaseStyleRepository,indent=0]
----

==== SQLite Database

[source,groovy]
.Store styles in a SQLite database. This works with GeoPackage layers.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=useSqliteDatabaseStyleRepository,indent=0]
----

==== H2 Database

[source,groovy]
.Store styles in a H2 database.
----
include::{sourcedir}/geoscript/cookbook/StyleRecipes.groovy[tags=useH2DatabaseStyleRepository,indent=0]
----